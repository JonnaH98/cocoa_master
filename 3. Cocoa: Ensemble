
if(!require(terra)) install.packages("terra") else library(terra)
if(!require(raster)) install.packages("raster") else library(raster)
if(!require(BiodiversityR)) install.packages("BiodiversityR") else  library(BiodiversityR)
if(!require(maxnet)) install.packages("maxnet") else library(maxnet)
if(!require(maxlike)) install.packages("maxlike") else library(maxlike)
if(!require(party)) install.packages("party") else library(party)
if(!require(dismo)) install.packages("dismo") else library(dismo)
if(!require(gdalUtils)) install.packages("gdalUtils") else library(gdalUtils)
if(!require(tidyverse)) install.packages("tidyverse") else library(tidyverse)
if(!require(magrittr)) install.packages("magrittr") else library(magrittr)
if(!require(sp)) install.packages("sp") else library(sp)
if(!require(dismo)) install.packages("dismo") else library(dismo)
if(!require(raster)) install.packages("raster") else library(raster)
if(!require(maptools)) install.packages("maptools") else library(maptools)
if(!require(rgeos)) install.packages("rgeos") else library(rgeos)
if(!require(rJava)) install.packages("rJava") else library(rJava)
if(!require(rgdal)) install.packages("rgdal") else library(rgdal)
if(!require(geosphere)) install.packages("geosphere") else library(geosphere)
if(!require(maps)) install.packages("maps") else  library(maps)
if(!require(alphahull)) install.packages("alphahull") else library(alphahull)
if(!require(tm)) install.packages("tm") else  library(tm)
if(!require(maxent)) install.packages("maxent") else library(maxent)
if(!require(gbm)) install.packages("gbm") else library(gbm)
if(!require(gam)) install.packages("gam") else library(gam)
if(!require(earth)) install.packages("earth") else library(earth)
if(!require(vegan)) install.packages("vegan") else library(vegan)
if(!require(MASS)) install.packages("MASS") else library(MASS)
if(!require(mgcv)) install.packages("mgcv") else library(mgcv)
if(!require(cluster)) install.packages("cluster") else library(cluster)
if(!require(rpart)) install.packages("rpart") else  library(rpart)
if(!require(effects)) install.packages("effects") else library(effects)
if(!require(multcomp)) install.packages("multcomp") else library(multcomp)
if(!require(ellipse)) install.packages("ellipse") else library(ellipse)
if(!require(maptree)) install.packages("maptree") else library(maptree)
if(!require(splancs)) install.packages("splancs") else library(splancs)
if(!require(spatial)) install.packages("spatial") else library(spatial)
if(!require(akima)) install.packages("akima") else library(akima)
if(!require(nnet)) install.packages("nnet") else library(nnet)
if(!require(randomForest)) install.packages("randomForest") else library(randomForest)
if(!require(mda)) install.packages("mda") else library(mda)
if(!require(kernlab)) install.packages("kernlab") else library(kernlab)
if(!require(e1071)) install.packages("e1071") else library(e1071)
if(!require(sem)) install.packages("sem") else library(sem)
if(!require(car)) install.packages("car") else library(car)
if(!require(maxlike)) install.packages("maxlike") else library(maxlike)
if(!require(glmnet)) install.packages("glmnet") else library(glmnet)
if(!require(PresenceAbsence)) install.packages("PresenceAbsence") else library(PresenceAbsence)
if(!require(tcltk2)) install.packages("tcltk2") else library(tcltk2)
if(!require(BiodiversityR)) install.packages("BiodiversityR") else  library(BiodiversityR)

#Read presence points
setwd ("C:/Users/jonna/OneDrive/Dokument/R")           #########################################Change directory

#occurence <- paste( 'PresencePointsEnvFilter.csv', sep='')
#occurencecsv <- read.csv(occurence,header = T, sep = ";")
#coord<- as.data.frame(occurencecsv[,c(1:3)])

occurence <- paste( 'CocoaPresencePoints.csv', sep='')
occurencecsv <- read.csv(occurence,header = T, sep = ";")
coord<- as.data.frame(occurencecsv[,c(1:3)])


randombackground <- paste( 'CocoaBackground.csv', sep='')
randomcsv <- read.csv(randombackground,header = T, sep = ";")
background<- as.data.frame(randomcsv[,c(1:3)])

both <- paste( 'CocoaPresencePointsandBackground.csv', sep='')
bothcsv <- read.csv(both,header = T, sep = ";")
allpoints<- as.data.frame(bothcsv[,c(1:3)])

#Read bioclim data
setwd ("C:/Users/jonna/OneDrive/Dokument/R/wc2.1_30s_bio")       #########################################Change directory
listbioclim <- list.files (pattern=".tif")
bioclim<- rast(listbioclim)

#Set area being looked at and its projection
GHA_CDI <- extent(-9, 4, 2, 12)

myproj <- "+proj=longlat +datum=WGS84"

#Administrative boundries of selected countries in West Africa
#GHANA_CDI <- "C:/Users/jonna/Documents/GHA_CDI.shp"
#GHANA_CDI <- readOGR(GHANA_CDI) 
#GHANA_CDI <- raster::crop(GHANA_CDI, GHA_CDI)

#Set bioclim data to the desired area
crs(bioclim) <- myproj
bioclim <- crop(bioclim, GHA_CDI)

#bioclim <- crop(bioclim, extent(GHANA_CDI)) ## crop and mask for WA countries
bioclim <- stack(bioclim)



#check VIF and exclude for those with a higher value than 10

#VIF.result <- ensemble.VIF(x = bioclim, a = allpoints[,c(2:3)],VIF.max = 10 )

#Selected bioclim predictors that have VIF lower than 10


#bioclim <- subset(bioclim, subset = VIF.result$vars.included)

#bioclim <- bioclim[[c(18,12,11,9,8,14,13,4,19,5)]] #selection and BIO5 added

#Ensemble modelling for each species

listofspecies <- sort(unique(coord$species))

time <- Sys.time() 
print(time) 
for (i in listofspecies) {
  
  coordtemp = coord[coord$species == i,]
  
  # step 1: 4-fold cross-validation
  
  step1 <- ensemble.calibrate.weights(x = bioclim, p = coordtemp[,c(2,3)], a = background[,c(2,3)],
                                      k=4,layer.drops=NULL, excludep = TRUE,
                                      SINK=TRUE, species.name= i,
                                      MAXENT=1, GBM=1, GBMSTEP=1, RF=1, 
                                      GLM=1, GLMSTEP=1, GAM=1, 
                                      GAMSTEP=1, MGCV=1, MGCVFIX=1, 
                                      EARTH=1, RPART=1, NNET=1, FDA=1, 
                                      SVM=1, SVME=1, BIOCLIM=1, 
                                      DOMAIN=1, MAHAL=1,
                                      ENSEMBLE.tune=TRUE, PROBIT=TRUE,
                                      threshold.method =  "MaxSens+Spec",
                                      threshold.sensitivity = 0.9,
                                      threshold.PresenceAbsence = TRUE, 
                                      ENSEMBLE.best=0, 
                                      ENSEMBLE.exponent=c(1, 2, 4, 6, 8),
                                      ENSEMBLE.min=0.7,
                                      Yweights="BIOMOD", factors=NULL,
                                      PLOTS=FALSE, formulae.defaults=TRUE,
                                      GBMSTEP.learning.rate=0.002)
  
  print (i)
  print ("step 1 done")
  print(Sys.time())
  
  
  # step 2: create models that will be used for the raster predictions
  
  # models with input.weights <0.05 are excluded
  output_weights <- step1$output.weights
  output_weights[output_weights < 0.05] <- 0
  
  
  
  step2 <- ensemble.calibrate.models(x = bioclim, p = coordtemp[,c(2,3)], a = background[,c(2,3)],
                                     k=4, layer.drops=NULL,
                                     SINK=TRUE, species.name = i,
                                     input.weights=output_weights,
                                     threshold.sensitivity = 0.9,
                                     threshold.PresenceAbsence = TRUE, 
                                     ENSEMBLE.tune=FALSE, PROBIT=TRUE,
                                     Yweights="BIOMOD", factors=NULL,
                                     PLOTS=FALSE, formulae.defaults=TRUE,
                                     GBMSTEP.learning.rate=0.002,
                                     models.save = TRUE)
  
  
  print (i)
  print ("step 2 done")
  print(Sys.time())
  
  #step3: Write raster for current climate
  ensemble_current <- ensemble.raster(xn = bioclim ,
                                      models.list = step2$models,
                                      input.weights=output_weights,
                                      thresholds = step2$models$thresholds,
                                      SINK=TRUE,
                                      RASTER.species.name = i, 
                                      RASTER.stack.name="bioclim")
  
  save(ensemble_current,file = paste0("C:/Users/jonna/OneDrive/Dokument/R/wc2.1_2.5m_bio/models", i,"_current.RData") )
  # write raster for GCMs for SSP126 and SSP585
  
  
  print (i)
  print ("step 3 done")
  print(Sys.time())
  
  #gcm <- c("ACCESS-CM2","ACCESS-ESM1-5")
  gcm <- c("ACCESS-CM2", "EC-Earth3-Veg", "EC-Earth3-Veg-LR", "IPSL-CM6A-LR")
  
  SSP <- c("ssp126","ssp585")

}
