
#This code includes the geographical and environmental filtering
#Needs to be added: 
#1. Geographical filtering 
#2. Possibility to run a folder that has a list of each species.
#3. Principal Component Analysis for environmental filtering


#envSample from Varela (2014)
#Copied directly from https://github.com/SaraVarela/envSample/blob/master/R/envSample.R as I could not download the package in my version of RStudio. No alterations made

if(!require(sqldf)) install.packages("sqldf") else library(sqldf)
if(!require(maps)) install.packages("maps") else library(maps)
if(!require(raster)) install.packages("raster") else library(raster)
if(!require(rgdal)) install.packages("rgdal") else library(rgdal)
if(!require(testthat)) install.packages("testthat") else library(testthat)
if(!require(roxygen2)) install.packages("roxygen2") else library(roxygen2)

envSample<- function (coord, filters, res, do.plot=TRUE){
  
  n<- length (filters)
  pot_points<- list ()
  for (i in 1:n){
    k<- filters [[i]] [!is.na(filters[[i]])]
    ext1<- range (k)
    ext1 [1]<- ext1[1]- 1
    x<- seq(ext1[1],ext1[2], by=res[[i]])
    pot_points[[i]]<- x
  }
  pot_p<- expand.grid(pot_points)
  
  ends<- NULL
  for (i in 1:n){
    fin<- pot_p [,i] + res[[i]]
    ends<- cbind (ends, fin)
  }
  
  pot_pp<- data.frame (pot_p, ends)
  pot_pp<- data.frame (pot_pp, groupID=c(1:nrow (pot_pp)))
  rows<- length (filters[[1]])
  filter<- data.frame(matrix(unlist(filters), nrow=rows))
  real_p<- data.frame (coord, filter)
  
  names_real<- c("lon", "lat")
  names_pot_st<- NULL
  names_pot_end<- NULL
  sql1<- NULL
  for (i in 1:n){
    names_real<- c(names_real, paste ("filter", i, sep=""))
    names_pot_st<- c(names_pot_st, paste ("start_f", i, sep=""))
    names_pot_end<- c(names_pot_end, paste ("end_f", i, sep=""))
    sql1<- paste (sql1, paste ("real_p.filter", i, sep=""), sep=", ")   
  }
  
  names (real_p)<- names_real
  names (pot_pp)<- c(names_pot_st, names_pot_end, "groupID")
  
  conditions<- paste ("(real_p.filter", 1, "<= pot_pp.end_f", 1,") and (real_p.filter", 1, "> pot_pp.start_f", 1, ")", sep="")
  for (i in 2:n){
    conditions<- paste (conditions, 
                        paste ("(real_p.filter", i, "<= pot_pp.end_f", i,") and (real_p.filter", i, "> pot_pp.start_f", i, ")", sep=""), 
                        sep="and")
  }
  
  selection_NA<- sqldf(paste ("select real_p.lon, real_p.lat, pot_pp.groupID",   
                              sql1, "from pot_pp left join real_p on", conditions, sep=" "))
  
  selection<- selection_NA [complete.cases(selection_NA),]
  
  final_points<- selection[!duplicated(selection$groupID), ]
  coord_filter<- data.frame (final_points$lon, final_points$lat) 
  names (coord_filter)<- c("lon", "lat")
  
  if (do.plot==TRUE){
    par (mfrow=c(1,2), mar=c(4,4,0,0.5))
    plot (filters[[1]], filters[[2]], pch=19, 
          col="grey50", xlab="Filter 1", ylab="Filter 2")
    points (final_points$filter1, final_points$filter2, 
            pch=19, col="#88000090")
    plot (coord, pch=19, col="grey50")
    map(add=T)
    points (coord_filter, pch=19, col="#88000090")
    
  }
  coord_filter
}

#end envSample

# Here I perform environmental filtering for one species (Acacia Mangium) following the example Varela's github with some minor alterations

if(!require(terra)) install.packages("terra") else library(terra)
if(!require(raster)) install.packages("raster") else library(raster)
if(!require(tools)) install.packages("tools") else library(tools)

setwd ("C:/Users/jonna/OneDrive/Dokument/R")
occurence <- paste( 'Acacia Mangium.csv', sep='')
bradypus <- read.csv(occurence,header = T, sep = ";")
bradypus
coord<- as.data.frame(bradypus[,c(1:2)])

setwd ("C:/Users/jonna/OneDrive/Dokument/R/wc2.1_2.5m_bio")
var <- list.files (pattern=".bil")
wc<- terra::rast(var)
data<- extract(wc, coord)
data<- as.data.frame (data)

envSample (coord, filters=list (data$wc2.1_2.5m_bio_1, data$wc2.1_2.5m_bio_12), res=list (20, 200), do.plot=TRUE)




